---
layout: post
title:  "二叉树"
date:   2018-03-14 15:38:57 +0800
categories:  Tree
catalog:    true
excerp: 2018-03-12 ~ 2018-
tags:
    -Tree
---
# 二叉树

## 满二叉树

每一个节点都有子节点(除了最后一层节点以外)--一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树

## 完全二叉树

除了最后一层外，其余节点都是满的，并且最后一层或者时满的，或者时在右边缺少连续若干节点。深度为k的完全二叉树，至少有2^(k-1)个节点，至多有2^k-1个节点。

## 术语

结点层：根节点的层定义为1，根的孩子为第二次节点
数的深度：树中最大结点层
结点的度：结点子树的个数
树的度：树中最大节点度(节点拥有子树的数量。)
叶子结点：度为0的结点
分支结点：度不为0的结点
有序树
无序树

## [BST（Binary Search Tree）](https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9),关于二叉树的描述，最重要的就是插入，查询，删除的效率

二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树（英语：ordered binary tree），排序二叉树（英语：sorted binary tree），是指一棵空树或者具有下列性质的二叉树：

若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；
若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；
任意节点的左、右子树也分别为二叉查找树；
没有键值相等的节点。

二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低。为O(log n)。二叉查找树是基础性数据结构，用于构建更为抽象的数据结构，如集合、multiset、关联数组等。
二叉查找树的查找过程和次优二叉树类似，通常采取二叉链表作为二叉查找树的存储结构。中序遍历二叉查找树可得到一个关键字的有序序列，一个无序序列可以通过构造一棵二叉查找树变成一个有序序列，构造树的过程即为对无序序列进行查找的过程。每次插入的新的结点都是二叉查找树上新的叶子结点，在进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为非空即可。搜索、插入、删除的复杂度等于树高，期望 {\displaystyle O(\log n)} O(\log n)，最坏 {\displaystyle O(n)} O(n)（数列有序，树退化成线性表）。
虽然二叉查找树的最坏效率是O(n),但它支持动态查询，且有很多改进版的二叉查找树可以使树高为 {\displaystyle O(\log n)} O(\log n),如SBT,AVL树，红黑树等。故不失为一种好的动态查找方法。

BST插入有一个很神奇的疑问，为什么无论新插入什么值，这个新值都在新节点上，而不用替换原节点

中序遍历


## 平衡二叉树

平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树，同时，平衡二叉树必定是二叉搜索树，反之则不一定。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等

就应用场景上看，平衡二叉树的插入查找效率高，所以平衡二叉树可以仔细研究，而其中rbt又是平衡二叉树被应用最多的，可以好好研究实现以下。

## 个人理解

二叉树一种数据结构，可以用来当做容器的设计模型

